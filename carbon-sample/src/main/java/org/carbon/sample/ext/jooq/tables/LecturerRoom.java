/**
 * This class is generated by jOOQ
 */
package org.carbon.sample.ext.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.carbon.persistent.adhoc.LocalDateTimeConverter;
import org.carbon.sample.ext.jooq.Carbondb;
import org.carbon.sample.ext.jooq.Keys;
import org.carbon.sample.ext.jooq.tables.records.LecturerRoomRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LecturerRoom extends TableImpl<LecturerRoomRecord> {

    private static final long serialVersionUID = -506320813;

    /**
     * The reference instance of <code>carbondb.lecturer_room</code>
     */
    public static final LecturerRoom LECTURER_ROOM = new LecturerRoom();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LecturerRoomRecord> getRecordType() {
        return LecturerRoomRecord.class;
    }

    /**
     * The column <code>carbondb.lecturer_room.id</code>.
     */
    public final TableField<LecturerRoomRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>carbondb.lecturer_room.lecturer_id</code>.
     */
    public final TableField<LecturerRoomRecord, Long> LECTURER_ID = createField("lecturer_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>carbondb.lecturer_room.room_name</code>.
     */
    public final TableField<LecturerRoomRecord, String> ROOM_NAME = createField("room_name", org.jooq.impl.SQLDataType.VARCHAR.length(127).nullable(false), this, "");

    /**
     * The column <code>carbondb.lecturer_room.room_detail</code>.
     */
    public final TableField<LecturerRoomRecord, String> ROOM_DETAIL = createField("room_detail", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>carbondb.lecturer_room.begin_datetime</code>.
     */
    public final TableField<LecturerRoomRecord, LocalDateTime> BEGIN_DATETIME = createField("begin_datetime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new LocalDateTimeConverter());

    /**
     * The column <code>carbondb.lecturer_room.end_datetime</code>.
     */
    public final TableField<LecturerRoomRecord, LocalDateTime> END_DATETIME = createField("end_datetime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new LocalDateTimeConverter());

    /**
     * Create a <code>carbondb.lecturer_room</code> table reference
     */
    public LecturerRoom() {
        this("lecturer_room", null);
    }

    /**
     * Create an aliased <code>carbondb.lecturer_room</code> table reference
     */
    public LecturerRoom(String alias) {
        this(alias, LECTURER_ROOM);
    }

    private LecturerRoom(String alias, Table<LecturerRoomRecord> aliased) {
        this(alias, aliased, null);
    }

    private LecturerRoom(String alias, Table<LecturerRoomRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Carbondb.CARBONDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LecturerRoomRecord, Long> getIdentity() {
        return Keys.IDENTITY_LECTURER_ROOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LecturerRoomRecord> getPrimaryKey() {
        return Keys.KEY_LECTURER_ROOM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LecturerRoomRecord>> getKeys() {
        return Arrays.<UniqueKey<LecturerRoomRecord>>asList(Keys.KEY_LECTURER_ROOM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LecturerRoomRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LecturerRoomRecord, ?>>asList(Keys.LECTURER_ROOM_LECTURER_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LecturerRoom as(String alias) {
        return new LecturerRoom(alias, this);
    }

    /**
     * Rename this table
     */
    public LecturerRoom rename(String name) {
        return new LecturerRoom(name, null);
    }
}
