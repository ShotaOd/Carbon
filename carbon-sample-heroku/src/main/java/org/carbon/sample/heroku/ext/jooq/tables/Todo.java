/*
 * This file is generated by jOOQ.
*/
package org.carbon.sample.heroku.ext.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.carbon.sample.heroku.ext.jooq.Carbon;
import org.carbon.sample.heroku.ext.jooq.Keys;
import org.carbon.sample.heroku.ext.jooq.tables.records.TodoRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Todo extends TableImpl<TodoRecord> {

    private static final long serialVersionUID = 1917838260;

    /**
     * The reference instance of <code>carbon.todo</code>
     */
    public static final Todo TODO = new Todo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TodoRecord> getRecordType() {
        return TodoRecord.class;
    }

    /**
     * The column <code>carbon.todo.id</code>.
     */
    public final TableField<TodoRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('carbon.todo_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>carbon.todo.text</code>.
     */
    public final TableField<TodoRecord, String> TEXT = createField("text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>carbon.todo.user_id</code>.
     */
    public final TableField<TodoRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>carbon.todo.available</code>.
     */
    public final TableField<TodoRecord, Boolean> AVAILABLE = createField("available", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>carbon.todo</code> table reference
     */
    public Todo() {
        this("todo", null);
    }

    /**
     * Create an aliased <code>carbon.todo</code> table reference
     */
    public Todo(String alias) {
        this(alias, TODO);
    }

    private Todo(String alias, Table<TodoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Todo(String alias, Table<TodoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Carbon.CARBON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TodoRecord, Long> getIdentity() {
        return Keys.IDENTITY_TODO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TodoRecord> getPrimaryKey() {
        return Keys.TODO_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TodoRecord>> getKeys() {
        return Arrays.<UniqueKey<TodoRecord>>asList(Keys.TODO_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TodoRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TodoRecord, ?>>asList(Keys.TODO__TODO_USER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Todo as(String alias) {
        return new Todo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Todo rename(String name) {
        return new Todo(name, null);
    }
}
